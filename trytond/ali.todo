import sys
from functools import wraps
from trytond.coog_config import get_sentry_dsn
from trytond.exceptions import UserError, UserWarning, ConcurrencyException, \
    NotLogged


def patch_dispatch_check():
    return sys.modules.get('trytond.protocols', None) is None


def patch_dispatch_gen(old, client):
    """
    Patch the `old_dispatcher` with an exception handler to send exceptions
    which occur to sentry through `client`

    :param old_dispatch: the function/method to be patched
    :param client: An instance of :class:`raven.Client`.
    """
    @wraps(old)
    def wrapper(*args, **kwargs):
        try:
            return old(*args, **kwargs)
        except (UserError, UserWarning, ConcurrencyException, NotLogged):
            raise
        except Exception:
            event_id = client.captureException()
            raise UserError(
                'An error occured\n\n'
                'Maintenance has been notified of this failure.\n'
                'In case you wish to discuss this issue with the team, please '
                'provide the following reference :\n\n%s' % event_id
                )
    return wrapper


def patch_dispatch():
    sentry_dsn = get_sentry_dsn()
    if sentry_dsn is not None:
        logger.info('using sentry')
        assert patch_dispatch_check(), \
            'protocols is already imported, patch not applicable'
        from raven import Client
        from trytond.protocols import dispatcher
        client = Client(sentry_dsn)
        dispatcher.dispatch = patch_dispatch_gen(dispatcher.dispatch, client)


def patch():
    patch_dispatch()


manage req, res => perf_analyzer

review coog cache
